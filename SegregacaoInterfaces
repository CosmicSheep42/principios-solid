//Abaixo temos o código de uma biblioteca hipotética, onde podemos encontrar objetos das classes Livros e Artigos. Ambos fazem parte da interface "ItemDaBiblioteca", que possúi alguns atributos comuns como ID 
//do objeto, Título, Autor e Ano de Publicação. Porém, alguns atributos só são utilizados pela classe Livro, como Editora, Data do Último Empréstimo e Nome de quem realizou o empréstimo, pois os artigos não podem
//ser emprestados. Os artigos também necessitam de atributos próprios que não estão cobertos pela interface, como as Revistas onde ele foi publicado e qual Universidade de Origem.

#include <iostream>
#include <string>

// Interface ItemDaBiblioteca
class ItemDaBiblioteca {
public:
    virtual int getID() = 0;
    virtual std::string getTitulo() = 0;
    virtual std::string getAutor() = 0;
    virtual int getAno() = 0;
    virtual std::string getEditora() = 0;
    virtual std::string NomeEmprestimo() = 0;
    virtual std::string DataUltimoEmprestimo() = 0;
};

// Classe Livro
class Livro : public ItemDaBiblioteca {
private:
    int ID;
    std::string Titulo;
    std::string Autor;
    int Ano;
    std::string Editora;
    std::string NomeEmprestimo;
    std::string DataUltimoEmprestimo;    

public:
    // Implementação dos métodos da interface
    int getID() override { return ID; }
    std::string getTitulo() override { return Titulo; }
    std::string getAutor() override { return Autor; }
    int getAno() override { return Ano; }
    std::string getEditora() override { return Editora; }
    std::string getDataUltimoEmprestimo() { return DataUltimoEmprestimo; }
    std::string getNomeEmprestimo() { return NomeEmprestimo; }
};

// Classe Artigo
class Artigo : public ItemDaBiblioteca {
private:
    int ID;
    std::string Titulo;
    std::string Autor;
    int Ano;
    std::string Revistas;
    std::string UniversidadeOrigem;

public:
    // Implementação dos métodos da interface
    int getID() override { return ID; }
    std::string getTitulo() override { return Titulo; }
    std::string getAutor() override { return Autor; }
    int getAno() override { return Ano; }
    // Métodos não utilizados
    std::string getEditora() override { return ""; }
    std::string getDataUltimoEmprestimo() override { return ""; }
    std::string getNomeEmprestimo() override { return ""; }
    // Métodos exclusivos da classe Artigo
    std::string getNomeRevista() { return Revistas; }
    std::string getUniversidadeOrigem() { return UniversidadeOrigem; }
};

//Podemos corrigir isso criando interfaces separadas para cada classe, garantindo que elas possuam apenas os atributos que utilizem. Tornando os atributos de empréstimo em uma interface a parte, possibilitamos
//que, caso a Biblioteca receba novas mídias emprestáveis, como DVDs, fique mais fácil de fazer a implementação dos atributos de empréstimo


#include <string>

class LivroBiblioteca {
public:
    virtual int getID() = 0;
    virtual std::string getTitulo() = 0;
    virtual std::string getAutor() = 0;
    virtual int getAno() = 0;
    virtual std::string getEditora() = 0;
};

class ArtigoBiblioteca {
public:
    virtual int getID() = 0;
    virtual std::string getTitulo() = 0;
    virtual std::string getAutor() = 0;
    virtual int getAno() = 0;
    virtual std::string getNomeRevista() = 0;
    virtual std::string getUniversidadeOrigem() = 0;
};

class Emprestimo {
public:
    virtual std::string NomeEmprestimo() = 0;
    virtual std::string DataUltimoEmprestimo() = 0;
};

class LivroEmprestimo : public LivroBiblioteca, public Emprestimo {
public:
    
};


// Classe Livro
class Livro : public LivroBiblioteca {
private:
    int ID;
    std::string Titulo;
    std::string Autor;
    int Ano;
    std::string Editora;
    std::string NomeEmprestimo;
    std::string DataUltimoEmprestimo;    

public:
    // Implementação dos métodos da interface
    int getID() override { return ID; }
    std::string getTitulo() override { return Titulo; }
    std::string getAutor() override { return Autor; }
    int getAno() override { return Ano; }
    std::string getEditora() override { return Editora; }
    std::string getDataUltimoEmprestimo() { return DataUltimoEmprestimo; }
    std::string getNomeEmprestimo() { return NomeEmprestimo; }
};

// Classe Artigo
class Artigo : public ArtigoBiblioteca {
private:
    int ID;
    std::string Titulo;
    std::string Autor;
    int Ano;
    std::string Revistas;
    std::string UniversidadeOrigem;

public:
    // Implementação dos métodos da interface
    int getID() override { return ID; }
    std::string getTitulo() override { return Titulo; }
    std::string getAutor() override { return Autor; }
    int getAno() override { return Ano; }
    std::string getNomeRevista() { return Revistas; }
    std::string getUniversidadeOrigem() { return UniversidadeOrigem; }
};


